/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MapSQL.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";                 
               
                      
  static = false;}PARSER_BEGIN(MapSQL)package mapsql.shell.parser;

public class MapSQL/*@bgen(jjtree)*/implements MapSQLTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTMapSQLState jjtree = new JJTMapSQLState();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    try    {      SimpleNode n = new MapSQL(System.in).Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(MapSQL)SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}

TOKEN [IGNORE_CASE]: /* KEYWORDS */
{
  < TABLE : "TABLE" >
| < CREATE : "CREATE" >
| < DROP : "DROP" >
| < SELECT : "SELECT" >
| < FROM : "FROM" >
| < WHERE : "WHERE" >
| < INSERT : "INSERT" >
| < INTO : "INTO" >
| < VALUES : "VALUES" >
| < UPDATE : "UPDATE" >
| < SET : "SET" >
| < DELETE : "DELETE" >
| < QUIT : "QUIT" >
| < SOURCE : "SOURCE" >
| < AND : "AND" >
| < OR : "OR" >
| < WILDCARD : "*" >
| < INT : "INTEGER" | "INT" >
| < CHAR : "CHAR" | "CHARACTER" >
| < FIELD_MODIFIERS : "UNIQUE" | "NOT NULL" | "AUTO_INCREMENT" >
| < COMPARISON_OPERATOR : "=" | "<>" | ">=" | "<=" | "<" | ">" | "LIKE" >
}

TOKEN : /* LITERALS */
{
  < LESS_THAN : "<" >
| < GREATER_THAN : ">" >
| < ADD_OPERATOR : "+" | "-" >
| < STRING :
	  "\"" ([ "*" ] | < LETTER > | < DIGIT > | "_" | "." | "'" | < ADVPUNCT >)* "\""
	| "'" ([ "*" ] | < LETTER > | < DIGIT > | "_" | "." | < ADVPUNCT >)* "'" >
| < IDENTIFIER : < LETTER > ( < LETTER > | "_" | "." | < DIGIT > )* >
| < NUMBER_LITERAL :
  	< DIGIT > [ "." ] < DIGIT > (["f", "F" ])?
  | < DIGIT > (["l", "L"])?   
  >
| < #DIGIT: [ "0"-"9" ] ([ "0"-"9" ])* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #ADVPUNCT : [ ":", "\\", "/", "?", ",", "@", "[", "]", "(", ")", " ", "!", "-", "=", "%" ] >
}

SimpleNode Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Start */
                          try {
/*@egen*/ (Statement())*/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/ }

// Statements
void Statement()       : {} {
(
  Source()
| Quit()
| (    CreateTable()
  | Select()
  | Insert()
  | Update()
  | Delete()
  | DropTable()
  ) ";"
)
}

void CreateTable() : {/*@bgen(jjtree) CreateTable */
  ASTCreateTable jjtn000 = new ASTCreateTable(JJTCREATETABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) CreateTable */
                          try {
/*@egen*/ < CREATE > < TABLE > Identifier() "(" Field() ( "," Field() )* ")"/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/}
void Select() : {/*@bgen(jjtree) Select */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Select */
                     try {
/*@egen*/ < SELECT > Columns() < FROM > Identifier() [< WHERE > OrCondition()]/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/ }
void Insert() : {/*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Insert */
                     try {
/*@egen*/ < INSERT > < INTO > Identifier() "(" Columns() ")" < VALUES > "(" Values() ")"/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/}
void Update() : {/*@bgen(jjtree) Update */
  ASTUpdate jjtn000 = new ASTUpdate(JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Update */
                     try {
/*@egen*/ < UPDATE > Identifier() < SET > Assignments() [ < WHERE > OrCondition()]/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/ }
void Delete() : {/*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Delete */
                     try {
/*@egen*/ < DELETE > < FROM > Identifier() [ < WHERE > OrCondition()]/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/ }
void DropTable() : {/*@bgen(jjtree) DropTable */
  ASTDropTable jjtn000 = new ASTDropTable(JJTDROPTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) DropTable */
                        try {
/*@egen*/ < DROP > < TABLE > Identifier()/*@bgen(jjtree)*/
                        } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            throw (RuntimeException)jjte000;
                          }
                          if (jjte000 instanceof ParseException) {
                            throw (ParseException)jjte000;
                          }
                          throw (Error)jjte000;
                        } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtn000.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/ }
void Source() : {/*@bgen(jjtree) Source */
  ASTSource jjtn000 = new ASTSource(JJTSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Source */
                     try {
/*@egen*/ < SOURCE > String()/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/ }
void Quit() : {/*@bgen(jjtree) Quit */
  ASTQuit jjtn000 = new ASTQuit(JJTQUIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Quit */
                   try {
/*@egen*/ < QUIT >/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
                   }
/*@egen*/ }


// Building Blocks
void Assignments() : {/*@bgen(jjtree) Assignments */
  ASTAssignments jjtn000 = new ASTAssignments(JJTASSIGNMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Assignments */
                          try {
/*@egen*/ Assignment() ("," Assignment())*/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/ }
void Assignment() : {/*@bgen(jjtree) Assignment */
                     ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;} {/*@bgen(jjtree) Assignment */
                                try {
/*@egen*/Identifier() t=< COMPARISON_OPERATOR > Value()/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                 jjtn000.jjtSetLastToken(getToken(0));
                                                                               }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtn000.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/}
void Field() : {/*@bgen(jjtree) Field */
  ASTField jjtn000 = new ASTField(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Field */
                    try {
/*@egen*/ Identifier() Type()/*@bgen(jjtree)*/
                    } catch (Throwable jjte000) {
                      if (jjtc000) {
                        jjtree.clearNodeScope(jjtn000);
                        jjtc000 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte000 instanceof RuntimeException) {
                        throw (RuntimeException)jjte000;
                      }
                      if (jjte000 instanceof ParseException) {
                        throw (ParseException)jjte000;
                      }
                      throw (Error)jjte000;
                    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
                    }
/*@egen*/ }
void Type()       : {} { Int() | Char() }
void Columns() : {/*@bgen(jjtree) Columns */
  ASTColumns jjtn000 = new ASTColumns(JJTCOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Columns */
                      try {
/*@egen*/ Wildcard() | Identifier() ("," Identifier())*/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/ }
void Values() : {/*@bgen(jjtree) Values */
  ASTValues jjtn000 = new ASTValues(JJTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) Values */
                     try {
/*@egen*/ Value() ("," Value())*/*@bgen(jjtree)*/
                     } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         throw (RuntimeException)jjte000;
                       }
                       if (jjte000 instanceof ParseException) {
                         throw (ParseException)jjte000;
                       }
                       throw (Error)jjte000;
                     } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/ }
void OrCondition() : {/*@bgen(jjtree) OrCondition */
  ASTOrCondition jjtn000 = new ASTOrCondition(JJTORCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) OrCondition */
                          try {
/*@egen*/ AndCondition() [ < OR > OrCondition() ]/*@bgen(jjtree)*/
                          } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              throw (RuntimeException)jjte000;
                            }
                            if (jjte000 instanceof ParseException) {
                              throw (ParseException)jjte000;
                            }
                            throw (Error)jjte000;
                          } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/ }
void AndCondition() : {/*@bgen(jjtree) AndCondition */
  ASTAndCondition jjtn000 = new ASTAndCondition(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} {/*@bgen(jjtree) AndCondition */
                           try {
/*@egen*/ Condition() [ < AND > AndCondition() ]/*@bgen(jjtree)*/
                           } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               throw (RuntimeException)jjte000;
                             }
                             if (jjte000 instanceof ParseException) {
                               throw (ParseException)jjte000;
                             }
                             throw (Error)jjte000;
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtn000.jjtSetLastToken(getToken(0));
                             }
                           }
/*@egen*/ }
void Condition() : {/*@bgen(jjtree) Condition */
                    ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;} {/*@bgen(jjtree) Condition */
                                try {
/*@egen*/ Identifier() t=< COMPARISON_OPERATOR > Value()/*@bgen(jjtree)*/
                                                                               {
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                 jjtn000.jjtSetLastToken(getToken(0));
                                                                               }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtn000.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/ }


// Primitives
void Value()       : {} { Number() | String() }
void Wildcard() : {/*@bgen(jjtree) Wildcard */
                    ASTWildcard jjtn000 = new ASTWildcard(JJTWILDCARD);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Wildcard */
                                 try {
/*@egen*/ t = < WILDCARD >/*@bgen(jjtree)*/
                                                  {
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                  }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/ }
void Modifier() : {/*@bgen(jjtree) Modifier */
                    ASTModifier jjtn000 = new ASTModifier(JJTMODIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Modifier */
                                 try {
/*@egen*/ t = < FIELD_MODIFIERS >/*@bgen(jjtree)*/
                                                         {
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                         }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/ }
void Identifier() : {/*@bgen(jjtree) Identifier */
                      ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Identifier */
                                   try {
/*@egen*/ t = < IDENTIFIER >/*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                      }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtn000.jjtSetLastToken(getToken(0));
                                     }
                                   }
/*@egen*/ }
void Char() : {/*@bgen(jjtree) Char */
                ASTChar jjtn000 = new ASTChar(JJTCHAR);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Char */
                             try {
/*@egen*/ t = < CHAR > "(" Number() ")" (Modifier())*/*@bgen(jjtree)*/
                                                                         {
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                                         }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/ }
void Int() : {/*@bgen(jjtree) Int */
               ASTInt jjtn000 = new ASTInt(JJTINT);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Int */
                            try {
/*@egen*/ t = < INT > { jjtn000.jjtSetValue(t.image); } (Modifier())*/*@bgen(jjtree)*/
                            } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                throw (RuntimeException)jjte000;
                              }
                              if (jjte000 instanceof ParseException) {
                                throw (ParseException)jjte000;
                              }
                              throw (Error)jjte000;
                            } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/ }
void String() : {/*@bgen(jjtree) String */
                  ASTString jjtn000 = new ASTString(JJTSTRING);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) String */
                               try {
/*@egen*/ t = < STRING >/*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                                jjtn000.jjtSetLastToken(getToken(0));
                                              }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtn000.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/ }
void Number() : {/*@bgen(jjtree) Number */
                  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) Number */
                               try {
/*@egen*/ [ t= < ADD_OPERATOR > { jjtn000.jjtSetValue(t); } ] UnsignedNumber()/*@bgen(jjtree)*/
                               } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte000;
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   throw (ParseException)jjte000;
                                 }
                                 throw (Error)jjte000;
                               } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtn000.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/ }
void UnsignedNumber() : {/*@bgen(jjtree) UnsignedNumber */
                          ASTUnsignedNumber jjtn000 = new ASTUnsignedNumber(JJTUNSIGNEDNUMBER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token t; } {/*@bgen(jjtree) UnsignedNumber */
                                       try {
/*@egen*/ t = < NUMBER_LITERAL >/*@bgen(jjtree)*/
                                                              {
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                                jjtn000.jjtSetLastToken(getToken(0));
                                                              }
/*@egen*/ { jjtn000.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
                                       }
/*@egen*/ }
