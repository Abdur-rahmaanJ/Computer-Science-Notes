/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.io.File;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import com.sun.jini.config.ConfigUtil;

start {
    port="8085";
    discoveryGroup="example-group";
}

com.sun.jini.start {
    private static policy = "server.policy";
    private static host = ConfigUtil.getHostAddress();
    private static port = start.port;
    private static jskdl = " http://" + host + ":" + port + "/jsk-dl.jar";
    private static pathSep=File.pathSeparator;

    serviceDescriptors = new ServiceDescriptor[]{
        new NonActivatableServiceDescriptor(
            "",
            policy,
            "lib/tools.jar",
            "com.sun.jini.tool.ClassServer",
            new String[]{"-port", port, "-dir",
                "lib-dl",
                "-verbose"}),

        new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/reggie-dl.jar" + jskdl,
            policy,
            "lib/reggie.jar",
            "com.sun.jini.reggie.TransientRegistrarImpl",
            new String[] { "start-infra.config",
                "start.discoveryGroup=\"" + start.discoveryGroup + "\""})

    };

    unusedServiceDescriptors = new ServiceDescriptor[]{
        new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/browser-dl.jar" + jskdl,
            policy,
            "lib/browser.jar",
            "com.sun.jini.example.browser.Browser",
            new String[] { "browserNonsecure.config" }),
        new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/mahalo-dl.jar" + jskdl,
            policy,
            "lib/mahalo.jar",
            "com.sun.jini.mahalo.TransientMahaloImpl",
            new String[] { "start-infra.config",
                "start.discoveryGroup=\"" + start.discoveryGroup + "\""}),

        new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/mercury-dl.jar" + jskdl,
            policy,
            "lib/mercury.jar",
            "com.sun.jini.mercury.TransientMercuryImpl",
            new String[] { "start-infra.config",
                "start.discoveryGroup=\"" + start.discoveryGroup + "\""}),
       new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/fiddler-dl.jar" + jskdl,
            policy,
            "lib/fiddler.jar",
            "com.sun.jini.fiddler.TransientFiddlerImpl",
            new String[] { "start-infra.config",
                "start.discoveryGroup=\"" + start.discoveryGroup + "\""}),

        new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/norm-dl.jar" + jskdl,
            policy,
            "lib/norm.jar",
            "com.sun.jini.norm.TransientNormServerImpl",
            new String[] { "start-infra.config",
                "start.discoveryGroup=\"" + start.discoveryGroup + "\""}),

        new NonActivatableServiceDescriptor(
            "http://" + host + ":" + port + "/outrigger-dl.jar" + jskdl,
            policy,
            "lib/outrigger.jar",
            "com.sun.jini.outrigger.TransientOutriggerImpl",
            new String[] { "start-infra.config",
                "start.discoveryGroup=\"" + start.discoveryGroup + "\""}),


    };
}

com.sun.jini.fiddler {
    initialLookupGroups = new String[] { start.discoveryGroup };
}

com.sun.jini.mahalo {
    initialLookupGroups = new String[] { start.discoveryGroup };
}

com.sun.jini.mercury {
    initialLookupGroups = new String[] { start.discoveryGroup };
}

com.sun.jini.norm {
    initialLookupGroups = new String[] { start.discoveryGroup };
}

com.sun.jini.outrigger {
    initialLookupGroups = new String[] { start.discoveryGroup };
}

com.sun.jini.reggie {

    initialLookupGroups = new String[] {start.discoveryGroup};
    initialMemberGroups = new String[] {start.discoveryGroup};

    serverExporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory());

}
