/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Configuration file for starting non-secure Hello service.
    Note that this service is a pure JERI dynamic proxy export, so it 
    doesn't need any codebase server.
 */

import java.lang.reflect.ReflectPermission;
import java.security.Permission;
import net.jini.constraint.BasicMethodConstraints;
import net.jini.core.constraint.InvocationConstraints;
import net.jini.core.entry.Entry;
import net.jini.core.lookup.ServiceID;
import net.jini.discovery.LookupDiscovery;
import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;
import net.jini.lookup.JoinManager;
import net.jini.lookup.entry.Name;
import net.jini.security.BasicProxyPreparer;

org.apache.river.examples.hello.greeter {
    discoveryGroup="example-group";

    groups = new String[] {discoveryGroup};
    
    exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory());

    serviceInvocationConstraints=InvocationConstraints.EMPTY;
    
    registrarPermissions= new Permission[] { 
        new RuntimePermission("accessClassInPackage.com.sun.proxy"),
        new ReflectPermission("newProxyInPackage.com.sun.jini.reggie")
    };

    registrarPreparer = 
        new BasicProxyPreparer(false, new BasicMethodConstraints(serviceInvocationConstraints),
            registrarPermissions );

    static discoveryManager = 
        new LookupDiscovery( groups, this);

    static attributes = new Entry[] { new Name("greeter-service") };

}

net.jini.lookup.JoinManager {
    registrarPreparer = org.apache.river.examples.hello.greeter.registrarPreparer;
    registrationPreparer = org.apache.river.examples.hello.greeter.registrarPreparer;
    
}

