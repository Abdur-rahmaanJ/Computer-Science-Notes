/* Generated By:JJTree&JavaCC: Do not edit this line. MapSQL.java */
package mapsql.shell.parser;

public class MapSQL/*@bgen(jjtree)*/implements MapSQLTreeConstants, MapSQLConstants {/*@bgen(jjtree)*/
  protected JJTMapSQLState jjtree = new JJTMapSQLState();public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \u005c"1+(2+3)*var;\u005c" :");
    try
    {
      SimpleNode n = new MapSQL(System.in).Start();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

  final public SimpleNode Start() throws ParseException {
                      /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CREATE:
        case DROP:
        case SELECT:
        case INSERT:
        case UPDATE:
        case DELETE:
        case QUIT:
        case SOURCE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Statement();
      }
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           jjtn000.jjtSetLastToken(getToken(0));
                                           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
    }
    throw new Error("Missing return statement in function");
  }

// Statements
  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOURCE:
      Source();
      break;
    case QUIT:
      Quit();
      break;
    case CREATE:
    case DROP:
    case SELECT:
    case INSERT:
    case UPDATE:
    case DELETE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE:
        CreateTable();
        break;
      case SELECT:
        Select();
        break;
      case INSERT:
        Insert();
        break;
      case UPDATE:
        Update();
        break;
      case DELETE:
        Delete();
        break;
      case DROP:
        DropTable();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(37);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CreateTable() throws ParseException {
                      /*@bgen(jjtree) CreateTable */
  ASTCreateTable jjtn000 = new ASTCreateTable(JJTCREATETABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CREATE);
      jj_consume_token(TABLE);
      Identifier();
      jj_consume_token(38);
      Field();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(39);
        Field();
      }
      jj_consume_token(40);
    } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
    }
  }

  final public void Select() throws ParseException {
                 /*@bgen(jjtree) Select */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SELECT);
      Columns();
      jj_consume_token(FROM);
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        OrCondition();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
    }
  }

  final public void Insert() throws ParseException {
                 /*@bgen(jjtree) Insert */
  ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      Identifier();
      jj_consume_token(38);
      Columns();
      jj_consume_token(40);
      jj_consume_token(VALUES);
      jj_consume_token(38);
      Values();
      jj_consume_token(40);
    } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
    }
  }

  final public void Update() throws ParseException {
                 /*@bgen(jjtree) Update */
  ASTUpdate jjtn000 = new ASTUpdate(JJTUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(UPDATE);
      Identifier();
      jj_consume_token(SET);
      Assignments();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        OrCondition();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
    }
  }

  final public void Delete() throws ParseException {
                 /*@bgen(jjtree) Delete */
  ASTDelete jjtn000 = new ASTDelete(JJTDELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHERE:
        jj_consume_token(WHERE);
        OrCondition();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
    }
  }

  final public void DropTable() throws ParseException {
                    /*@bgen(jjtree) DropTable */
  ASTDropTable jjtn000 = new ASTDropTable(JJTDROPTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DROP);
      jj_consume_token(TABLE);
      Identifier();
    } catch (Throwable jjte000) {
                          if (jjtc000) {
                            jjtree.clearNodeScope(jjtn000);
                            jjtc000 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte000 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte000;}
                          }
                          if (jjte000 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte000;}
                          }
                          {if (true) throw (Error)jjte000;}
    } finally {
                          if (jjtc000) {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtn000.jjtSetLastToken(getToken(0));
                          }
    }
  }

  final public void Source() throws ParseException {
                 /*@bgen(jjtree) Source */
  ASTSource jjtn000 = new ASTSource(JJTSOURCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SOURCE);
      String();
    } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
    }
  }

  final public void Quit() throws ParseException {
               /*@bgen(jjtree) Quit */
  ASTQuit jjtn000 = new ASTQuit(JJTQUIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(QUIT);
    } finally {
                     if (jjtc000) {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
    }
  }

// Building Blocks
  final public void Assignments() throws ParseException {
                      /*@bgen(jjtree) Assignments */
  ASTAssignments jjtn000 = new ASTAssignments(JJTASSIGNMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Assignment();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(39);
        Assignment();
      }
    } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
    }
  }

  final public void Assignment() throws ParseException {
                     /*@bgen(jjtree) Assignment */
                     ASTAssignment jjtn000 = new ASTAssignment(JJTASSIGNMENT);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
                     jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      Identifier();
      t = jj_consume_token(COMPARISON_OPERATOR);
      Value();
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                 jjtn000.jjtSetLastToken(getToken(0));
                                                                                 jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtn000.jjtSetLastToken(getToken(0));
                                  }
    }
  }

  final public void Field() throws ParseException {
                /*@bgen(jjtree) Field */
  ASTField jjtn000 = new ASTField(JJTFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      Type();
    } catch (Throwable jjte000) {
                      if (jjtc000) {
                        jjtree.clearNodeScope(jjtn000);
                        jjtc000 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte000 instanceof RuntimeException) {
                        {if (true) throw (RuntimeException)jjte000;}
                      }
                      if (jjte000 instanceof ParseException) {
                        {if (true) throw (ParseException)jjte000;}
                      }
                      {if (true) throw (Error)jjte000;}
    } finally {
                      if (jjtc000) {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtn000.jjtSetLastToken(getToken(0));
                      }
    }
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      Int();
      break;
    case CHAR:
      Char();
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Columns() throws ParseException {
                  /*@bgen(jjtree) Columns */
  ASTColumns jjtn000 = new ASTColumns(JJTCOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WILDCARD:
        Wildcard();
        break;
      case IDENTIFIER:
        Identifier();
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 39:
            ;
            break;
          default:
            jj_la1[9] = jj_gen;
            break label_4;
          }
          jj_consume_token(39);
          Identifier();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
    }
  }

  final public void Values() throws ParseException {
                 /*@bgen(jjtree) Values */
  ASTValues jjtn000 = new ASTValues(JJTVALUES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Value();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(39);
        Value();
      }
    } catch (Throwable jjte000) {
                       if (jjtc000) {
                         jjtree.clearNodeScope(jjtn000);
                         jjtc000 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte000 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte000;}
                       }
                       if (jjte000 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte000;}
                       }
                       {if (true) throw (Error)jjte000;}
    } finally {
                       if (jjtc000) {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
    }
  }

  final public void OrCondition() throws ParseException {
                      /*@bgen(jjtree) OrCondition */
  ASTOrCondition jjtn000 = new ASTOrCondition(JJTORCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AndCondition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        OrCondition();
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                            if (jjtc000) {
                              jjtree.clearNodeScope(jjtn000);
                              jjtc000 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte000 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte000;}
                            }
                            if (jjte000 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte000;}
                            }
                            {if (true) throw (Error)jjte000;}
    } finally {
                            if (jjtc000) {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtn000.jjtSetLastToken(getToken(0));
                            }
    }
  }

  final public void AndCondition() throws ParseException {
                       /*@bgen(jjtree) AndCondition */
  ASTAndCondition jjtn000 = new ASTAndCondition(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Condition();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        AndCondition();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
                             if (jjtc000) {
                               jjtree.clearNodeScope(jjtn000);
                               jjtc000 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte000 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte000;}
                             }
                             if (jjte000 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte000;}
                             }
                             {if (true) throw (Error)jjte000;}
    } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtn000.jjtSetLastToken(getToken(0));
                             }
    }
  }

  final public void Condition() throws ParseException {
                    /*@bgen(jjtree) Condition */
                    ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      Identifier();
      t = jj_consume_token(COMPARISON_OPERATOR);
      Value();
                                                                                 jjtree.closeNodeScope(jjtn000, true);
                                                                                 jjtc000 = false;
                                                                                 jjtn000.jjtSetLastToken(getToken(0));
                                                                                 jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtn000.jjtSetLastToken(getToken(0));
                                  }
    }
  }

// Primitives
  final public void Value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_OPERATOR:
    case NUMBER_LITERAL:
      Number();
      break;
    case STRING:
      String();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Wildcard() throws ParseException {
                   /*@bgen(jjtree) Wildcard */
                    ASTWildcard jjtn000 = new ASTWildcard(JJTWILDCARD);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(WILDCARD);
                                                    jjtree.closeNodeScope(jjtn000, true);
                                                    jjtc000 = false;
                                                    jjtn000.jjtSetLastToken(getToken(0));
                                                    jjtn000.jjtSetValue(t.image);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
    }
  }

  final public void Modifier() throws ParseException {
                   /*@bgen(jjtree) Modifier */
                    ASTModifier jjtn000 = new ASTModifier(JJTMODIFIER);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
                    jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(FIELD_MODIFIERS);
                                                           jjtree.closeNodeScope(jjtn000, true);
                                                           jjtc000 = false;
                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                           jjtn000.jjtSetValue(t.image);
    } finally {
                                   if (jjtc000) {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtn000.jjtSetLastToken(getToken(0));
                                   }
    }
  }

  final public void Identifier() throws ParseException {
                     /*@bgen(jjtree) Identifier */
                      ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
                      jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                                                        jjtree.closeNodeScope(jjtn000, true);
                                                        jjtc000 = false;
                                                        jjtn000.jjtSetLastToken(getToken(0));
                                                        jjtn000.jjtSetValue(t.image);
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtn000.jjtSetLastToken(getToken(0));
                                     }
    }
  }

  final public void Char() throws ParseException {
               /*@bgen(jjtree) Char */
                ASTChar jjtn000 = new ASTChar(JJTCHAR);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
                jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(CHAR);
      jj_consume_token(38);
      Number();
      jj_consume_token(40);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELD_MODIFIERS:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_6;
        }
        Modifier();
      }
                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                           jjtc000 = false;
                                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                                           jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte000;}
                               }
                               if (jjte000 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte000;}
                               }
                               {if (true) throw (Error)jjte000;}
    } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtn000.jjtSetLastToken(getToken(0));
                               }
    }
  }

  final public void Int() throws ParseException {
              /*@bgen(jjtree) Int */
               ASTInt jjtn000 = new ASTInt(JJTINT);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
               jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(INT);
                                          jjtn000.jjtSetValue(t.image);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FIELD_MODIFIERS:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        Modifier();
      }
    } catch (Throwable jjte000) {
                              if (jjtc000) {
                                jjtree.clearNodeScope(jjtn000);
                                jjtc000 = false;
                              } else {
                                jjtree.popNode();
                              }
                              if (jjte000 instanceof RuntimeException) {
                                {if (true) throw (RuntimeException)jjte000;}
                              }
                              if (jjte000 instanceof ParseException) {
                                {if (true) throw (ParseException)jjte000;}
                              }
                              {if (true) throw (Error)jjte000;}
    } finally {
                              if (jjtc000) {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtn000.jjtSetLastToken(getToken(0));
                              }
    }
  }

  final public void String() throws ParseException {
                 /*@bgen(jjtree) String */
                  ASTString jjtn000 = new ASTString(JJTSTRING);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(STRING);
                                                jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
                                                jjtn000.jjtSetLastToken(getToken(0));
                                                jjtn000.jjtSetValue(t.image);
    } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtn000.jjtSetLastToken(getToken(0));
                                 }
    }
  }

  final public void Number() throws ParseException {
                 /*@bgen(jjtree) Number */
                  ASTNumber jjtn000 = new ASTNumber(JJTNUMBER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
                  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD_OPERATOR:
        t = jj_consume_token(ADD_OPERATOR);
                                                       jjtn000.jjtSetValue(t);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      UnsignedNumber();
    } catch (Throwable jjte000) {
                                 if (jjtc000) {
                                   jjtree.clearNodeScope(jjtn000);
                                   jjtc000 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte000 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte000;}
                                 }
                                 if (jjte000 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte000;}
                                 }
                                 {if (true) throw (Error)jjte000;}
    } finally {
                                 if (jjtc000) {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtn000.jjtSetLastToken(getToken(0));
                                 }
    }
  }

  final public void UnsignedNumber() throws ParseException {
                         /*@bgen(jjtree) UnsignedNumber */
                          ASTUnsignedNumber jjtn000 = new ASTUnsignedNumber(JJTUNSIGNEDNUMBER);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(NUMBER_LITERAL);
                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                jjtc000 = false;
                                                                jjtn000.jjtSetLastToken(getToken(0));
                                                                jjtn000.jjtSetValue(t.image);
    } finally {
                                         if (jjtc000) {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtn000.jjtSetLastToken(getToken(0));
                                         }
    }
  }

  /** Generated Token Manager. */
  public MapSQLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1d2700,0x52700,0x1d2700,0x0,0x1000,0x1000,0x1000,0x0,0x3000000,0x0,0x800000,0x0,0x400000,0x200000,0xc0000000,0x4000000,0x4000000,0x40000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x80,0x0,0x80,0x1,0x80,0x0,0x0,0x2,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MapSQL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MapSQL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MapSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MapSQL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MapSQLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MapSQL(MapSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MapSQLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[41];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 41; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
